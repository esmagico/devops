services:
  epic_global_ai:
      image: ghcr.io/${org}/epic-global-ai-services:${EPIC_GLOBAL_AI_IMAGE_TAG:-${DEFAULT_IMAGE_TAG:?DEFAULT_IMAGE_TAG is not set}}
      restart: always
      environment:
        GOOGLE_AI_API_KEY: ${GOOGLE_AI_API_KEY:?GOOGLE_AI_API_KEY is not set}
        DATABASE_URI: ${DATABASE_URI:?DATABASE_URI is not set}
        CELERY_BROKER_URL: ${CELERY_BROKER_URL:?CELERY_BROKER_URL is not set}
        CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND:?CELERY_RESULT_BACKEND is not set}
        BACKEND_BASE_URL: ${BACKEND_BASE_URL:?BACKEND_BASE_URL is not set}
        CONTRACT_BASE_URL: ${CONTRACT_BASE_URL:?CONTRACT_BASE_URL is not set}
        SCRAPER_AUTH: ${SCRAPER_AUTH:?SCRAPER_AUTH is not set}
        CONTEXT_SERVICE_BASE_URL: ${CONTEXT_SERVICE_BASE_URL:?CONTEXT_SERVICE_BASE_URL is not set}
        CONTEXT_MAX_RETRIES: ${CONTEXT_MAX_RETRIES:?CONTEXT_MAX_RETRIES is not set}
  
  # ToDo: Figure out a way to dockerize celery in a proper way.
  celery:
      image: ghcr.io/${org}/epic-global-ai-services:${EPIC_GLOBAL_AI_IMAGE_TAG:-${DEFAULT_IMAGE_TAG:?DEFAULT_IMAGE_TAG is not set}}
      restart: always
      command: celery -A app.utils.celery.celery worker --loglevel=info
      depends_on:
        - rabbitmq
        - redis
      environment:
        GOOGLE_AI_API_KEY: ${GOOGLE_AI_API_KEY:?GOOGLE_AI_API_KEY is not set}
        DATABASE_URI: ${DATABASE_URI:?DATABASE_URI is not set}
        CELERY_BROKER_URL: ${CELERY_BROKER_URL:?CELERY_BROKER_URL is not set}
        CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND:?CELERY_RESULT_BACKEND is not set}
        BACKEND_BASE_URL: ${BACKEND_BASE_URL:?BACKEND_BASE_URL is not set}
        CONTRACT_BASE_URL: ${CONTRACT_BASE_URL:?CONTRACT_BASE_URL is not set}
        SCRAPER_AUTH: ${SCRAPER_AUTH:?SCRAPER_AUTH is not set}
        CONTEXT_SERVICE_BASE_URL: ${CONTEXT_SERVICE_BASE_URL:?CONTEXT_SERVICE_BASE_URL is not set}
        CONTEXT_MAX_RETRIES: ${CONTEXT_MAX_RETRIES:?CONTEXT_MAX_RETRIES is not set}

  # ToDo: The redis and db instances should be shared across instances. To be discussed
  redis-backend:
      image: redis:bookworm
      restart: always

  db-ai:
    image: postgres:14.15-alpine3.21
    restart: always
    ports:
      - "5432:5432" 
    volumes:
      - db-ai:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER:?POSTGRES_USER is not set}", "-d", "${POSTGRES_DB_AI:?POSTGRES_DB is not set}"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: ${POSTGRES_USER:?POSTGRES_USER is not set}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is not set}
      POSTGRES_DB: ${POSTGRES_DB_AI:?POSTGRES_DB_AI is not set}

volumes:
  db-ai: